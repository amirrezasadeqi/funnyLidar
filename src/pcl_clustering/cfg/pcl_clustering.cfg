#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "pcl_clustering"


gen = ParameterGenerator()


# adding parameters which are dynamically reconfigurable
# gen.add("int_param", int_t, 0, "an integer parameter", 50, 0, 100)
# gen.add("double_param", double_t, 0, "a double parameter", 0.5, 0, 1.0)
# gen.add("string_param", str_t, 0, "a string parameter", "hello world")
# gen.add("bool_param", bool_t, 0, "a boolean parameter", True)
gen.add("enable_downsampling", bool_t, 0,
        "whether to use Grid Voxelization or not", True)
gen.add("show_voxeled_output", bool_t, 0,
        "Whether to show the voxel filter output or not", False)
gen.add("show_cropped_output", bool_t, 0,
        "Whether to show the cropping filter output or not", False)
gen.add("show_floor_segmented_output", bool_t, 0,
        "Whether to show the floor segmented output or not", False)
gen.add("voxel_size", double_t, 0, "Size of voxel cube sides", 0.1, 0.1, 1.0)
gen.add("x_crop_min", double_t, 0,
        "minimum x for cropping the input cloud", 4.2, 4.2, 10.0)
gen.add("x_crop_max", double_t, 0,
        "maximum x for cropping the input cloud", 30.0, 20.0, 200.0)
gen.add("floor_segmentor_dist_threshold", double_t, 0,
        "I think this is the threshold that we consider\
        a point as the outlier of the plane model.", 0.2, 0.0, 1.0)
euclidian_clustering_group = gen.add_group(
    "euclidian_clustering_group", type="collapse")
euclidian_clustering_group.add("cluster_threshold", double_t,
                               0, "Smaller this parameter, more clustesrs", 0.25, 0.0, 1.0)
euclidian_clustering_group.add("min_cluster_points", int_t, 0,
                               "Minimum Number of Points necessary to consider a mass as a \
                                cluster", 50, 1, 500)
euclidian_clustering_group.add("max_cluster_points", int_t, 0,
                               "Maximum Number of Points which can be a \
                                cluster", 25000, 600, 40000)
kdtree_search_group = gen.add_group("kdtree_search_group", type="collapse")
kdtree_search_group.add("kdtree_search_radius", double_t, 0, "Radius to find neighbour points of the cluster center\
                                              to check for interesting object", 0.5, 0.0, 5.0)
kdtree_search_group.add("intersting_object_inlier_percent", double_t, 0, "Percent of the points\
                                                                          necessary to be inside the search Radius\
                                                                          to consider the object as interesting", 0.8, 0.0, 1.0)
kdtree_search_group.add("max_points_interesting_obj", int_t, 0, "Maximum Number of points in an \
                                                                 interesting object cluster", 70, 1, 1000)

# size_enum = gen.enum([
#     gen.const("Small", int_t, 0, "Small Constant"),
#     gen.const("Medium", int_t, 1, "Medium Constant"),
#     gen.const("Big", int_t, 2, "Big Constant"),
# ], "An example Enum for dynamic Reconfigure")

# gen.add("enum_param", int_t, 0, "A parameter with value specifying by enums",
#         1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "cluster_avia_reconfigurable", "pcl_clustering"))
